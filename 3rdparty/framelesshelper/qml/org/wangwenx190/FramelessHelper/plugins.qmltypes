import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by qmltyperegistrar.

Module {
    Component {
        file: "framelessquickapplicationwindow_p.h"
        name: "wangwenx190::FramelessHelper::FramelessQuickApplicationWindow"
        accessSemantics: "reference"
        defaultProperty: "contentData"
        prototype: "QQuickApplicationWindow"
        exports: [
            "org.wangwenx190.FramelessHelper/FramelessApplicationWindow 1.0"
        ]
        exportMetaObjectRevisions: [256]
        Property {
            name: "hidden"
            type: "bool"
            read: "isHidden"
            notify: "hiddenChanged"
            index: 0
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "normal"
            type: "bool"
            read: "isNormal"
            notify: "normalChanged"
            index: 1
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "minimized"
            type: "bool"
            read: "isMinimized"
            notify: "minimizedChanged"
            index: 2
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "maximized"
            type: "bool"
            read: "isMaximized"
            notify: "maximizedChanged"
            index: 3
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "zoomed"
            type: "bool"
            read: "isZoomed"
            notify: "zoomedChanged"
            index: 4
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "fullScreen"
            type: "bool"
            read: "isFullScreen"
            notify: "fullScreenChanged"
            index: 5
            isReadonly: true
            isFinal: true
        }
        Signal { name: "hiddenChanged" }
        Signal { name: "normalChanged" }
        Signal { name: "minimizedChanged" }
        Signal { name: "maximizedChanged" }
        Signal { name: "zoomedChanged" }
        Signal { name: "fullScreenChanged" }
        Method { name: "showMinimized2" }
        Method { name: "toggleMaximized" }
        Method { name: "toggleFullScreen" }
    }
    Component {
        file: "framelessquickhelper.h"
        name: "wangwenx190::FramelessHelper::FramelessQuickHelper"
        accessSemantics: "reference"
        defaultProperty: "data"
        parentProperty: "parent"
        prototype: "QQuickItem"
        exports: ["org.wangwenx190.FramelessHelper/FramelessHelper 1.0"]
        exportMetaObjectRevisions: [256]
        attachedType: "FramelessQuickHelper"
        Property {
            name: "titleBarItem"
            type: "QQuickItem"
            isPointer: true
            read: "titleBarItem"
            write: "setTitleBarItem"
            notify: "titleBarItemChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "windowFixedSize"
            type: "bool"
            read: "isWindowFixedSize"
            write: "setWindowFixedSize"
            notify: "windowFixedSizeChanged"
            index: 1
            isFinal: true
        }
        Property {
            name: "blurBehindWindowEnabled"
            type: "bool"
            read: "isBlurBehindWindowEnabled"
            write: "setBlurBehindWindowEnabled"
            notify: "blurBehindWindowEnabledChanged"
            index: 2
            isFinal: true
        }
        Property {
            name: "window"
            type: "QQuickWindow"
            isPointer: true
            read: "window"
            notify: "windowChanged2"
            index: 3
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "extendsContentIntoTitleBar"
            type: "bool"
            read: "isContentExtendedIntoTitleBar"
            write: "extendsContentIntoTitleBar"
            notify: "extendsContentIntoTitleBarChanged"
            index: 4
            isFinal: true
        }
        Signal { name: "extendsContentIntoTitleBarChanged" }
        Signal { name: "titleBarItemChanged" }
        Signal { name: "windowFixedSizeChanged" }
        Signal { name: "blurBehindWindowEnabledChanged" }
        Signal { name: "windowChanged2" }
        Signal { name: "ready" }
        Method {
            name: "extendsContentIntoTitleBar"
            Parameter { name: "value"; type: "bool" }
        }
        Method { name: "extendsContentIntoTitleBar"; isCloned: true }
        Method {
            name: "setTitleBarItem"
            Parameter { name: "value"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "setSystemButton"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
            Parameter { name: "buttonType"; type: "QuickGlobal::SystemButtonType" }
        }
        Method {
            name: "setHitTestVisible"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setHitTestVisible"
            isCloned: true
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "setHitTestVisible_rect"
            Parameter { name: "rect"; type: "QRect" }
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setHitTestVisible_rect"
            isCloned: true
            Parameter { name: "rect"; type: "QRect" }
        }
        Method {
            name: "setHitTestVisible_object"
            Parameter { name: "object"; type: "QObject"; isPointer: true }
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setHitTestVisible_object"
            isCloned: true
            Parameter { name: "object"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "setHitTestVisible_item"
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
            Parameter { name: "visible"; type: "bool" }
        }
        Method {
            name: "setHitTestVisible_item"
            isCloned: true
            Parameter { name: "item"; type: "QQuickItem"; isPointer: true }
        }
        Method {
            name: "showSystemMenu"
            Parameter { name: "pos"; type: "QPoint" }
        }
        Method {
            name: "windowStartSystemMove2"
            Parameter { name: "pos"; type: "QPoint" }
        }
        Method {
            name: "windowStartSystemResize2"
            Parameter { name: "edges"; type: "Qt::Edges" }
            Parameter { name: "pos"; type: "QPoint" }
        }
        Method { name: "moveWindowToDesktopCenter" }
        Method { name: "bringWindowToFront" }
        Method {
            name: "setWindowFixedSize"
            Parameter { name: "value"; type: "bool" }
        }
        Method {
            name: "setBlurBehindWindowEnabled"
            Parameter { name: "value"; type: "bool" }
        }
    }
    Component {
        file: "framelessquickutils.h"
        name: "wangwenx190::FramelessHelper::FramelessQuickUtils"
        accessSemantics: "reference"
        prototype: "QObject"
        interfaces: ["QQmlParserStatus"]
        exports: ["org.wangwenx190.FramelessHelper/FramelessUtils 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [256]
        Property {
            name: "titleBarHeight"
            type: "double"
            read: "titleBarHeight"
            index: 0
            isReadonly: true
            isFinal: true
            isConstant: true
        }
        Property {
            name: "frameBorderVisible"
            type: "bool"
            read: "frameBorderVisible"
            index: 1
            isReadonly: true
            isFinal: true
            isConstant: true
        }
        Property {
            name: "frameBorderThickness"
            type: "double"
            read: "frameBorderThickness"
            index: 2
            isReadonly: true
            isFinal: true
            isConstant: true
        }
        Property {
            name: "systemTheme"
            type: "QuickGlobal::SystemTheme"
            read: "systemTheme"
            write: "setOverrideTheme"
            notify: "systemThemeChanged"
            index: 3
            isFinal: true
        }
        Property {
            name: "systemAccentColor"
            type: "QColor"
            read: "systemAccentColor"
            notify: "systemAccentColorChanged"
            index: 4
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "titleBarColorized"
            type: "bool"
            read: "titleBarColorized"
            notify: "titleBarColorizedChanged"
            index: 5
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "defaultSystemLightColor"
            type: "QColor"
            read: "defaultSystemLightColor"
            index: 6
            isReadonly: true
            isFinal: true
            isConstant: true
        }
        Property {
            name: "defaultSystemDarkColor"
            type: "QColor"
            read: "defaultSystemDarkColor"
            index: 7
            isReadonly: true
            isFinal: true
            isConstant: true
        }
        Property {
            name: "defaultSystemButtonSize"
            type: "QSizeF"
            read: "defaultSystemButtonSize"
            index: 8
            isReadonly: true
            isFinal: true
            isConstant: true
        }
        Property {
            name: "defaultSystemButtonIconSize"
            type: "QSizeF"
            read: "defaultSystemButtonIconSize"
            index: 9
            isReadonly: true
            isFinal: true
            isConstant: true
        }
        Property {
            name: "defaultSystemButtonBackgroundColor"
            type: "QColor"
            read: "defaultSystemButtonBackgroundColor"
            index: 10
            isReadonly: true
            isFinal: true
            isConstant: true
        }
        Property {
            name: "defaultSystemCloseButtonBackgroundColor"
            type: "QColor"
            read: "defaultSystemCloseButtonBackgroundColor"
            index: 11
            isReadonly: true
            isFinal: true
            isConstant: true
        }
        Signal { name: "systemThemeChanged" }
        Signal { name: "systemAccentColorChanged" }
        Signal { name: "titleBarColorizedChanged" }
        Method {
            name: "getSystemButtonBackgroundColor"
            type: "QColor"
            Parameter { name: "button"; type: "QuickGlobal::SystemButtonType" }
            Parameter { name: "state"; type: "QuickGlobal::ButtonState" }
        }
    }
    Component {
        file: "framelessquickwindow_p.h"
        name: "wangwenx190::FramelessHelper::FramelessQuickWindow"
        accessSemantics: "reference"
        prototype: "QQuickWindowQmlImpl"
        exports: ["org.wangwenx190.FramelessHelper/FramelessWindow 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "hidden"
            type: "bool"
            read: "isHidden"
            notify: "hiddenChanged"
            index: 0
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "normal"
            type: "bool"
            read: "isNormal"
            notify: "normalChanged"
            index: 1
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "minimized"
            type: "bool"
            read: "isMinimized"
            notify: "minimizedChanged"
            index: 2
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "maximized"
            type: "bool"
            read: "isMaximized"
            notify: "maximizedChanged"
            index: 3
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "zoomed"
            type: "bool"
            read: "isZoomed"
            notify: "zoomedChanged"
            index: 4
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "fullScreen"
            type: "bool"
            read: "isFullScreen"
            notify: "fullScreenChanged"
            index: 5
            isReadonly: true
            isFinal: true
        }
        Signal { name: "hiddenChanged" }
        Signal { name: "normalChanged" }
        Signal { name: "minimizedChanged" }
        Signal { name: "maximizedChanged" }
        Signal { name: "zoomedChanged" }
        Signal { name: "fullScreenChanged" }
        Method { name: "showMinimized2" }
        Method { name: "toggleMaximized" }
        Method { name: "toggleFullScreen" }
    }
    Component {
        file: "quickchromepalette.h"
        name: "wangwenx190::FramelessHelper::QuickChromePalette"
        accessSemantics: "reference"
        interfaces: ["QQmlParserStatus"]
    }
    Component {
        file: "framelesshelperquick_global.h"
        name: "wangwenx190::FramelessHelper::QuickGlobal"
        accessSemantics: "reference"
        prototype: "QObject"
        exports: [
            "org.wangwenx190.FramelessHelper/FramelessHelperConstants 1.0"
        ]
        isCreatable: false
        exportMetaObjectRevisions: [256]
        Enum {
            name: "SystemTheme"
            values: ["Unknown", "Light", "Dark", "HighContrast"]
        }
        Enum {
            name: "SystemButtonType"
            values: [
                "Unknown",
                "WindowIcon",
                "Help",
                "Minimize",
                "Maximize",
                "Restore",
                "Close"
            ]
        }
        Enum {
            name: "ButtonState"
            values: ["Normal", "Hovered", "Pressed", "Released"]
        }
        Enum {
            name: "BlurMode"
            values: [
                "Disable",
                "Default",
                "Windows_Aero",
                "Windows_Acrylic",
                "Windows_Mica",
                "Windows_MicaAlt"
            ]
        }
        Enum {
            name: "WindowEdge"
            values: ["Left", "Top", "Right", "Bottom"]
        }
        Enum {
            name: "WindowEdges"
            alias: "WindowEdge"
            isFlag: true
            values: ["Left", "Top", "Right", "Bottom"]
        }
    }
    Component {
        file: "quickimageitem_p.h"
        name: "wangwenx190::FramelessHelper::QuickImageItem"
        accessSemantics: "reference"
        prototype: "QQuickPaintedItem"
        exports: ["org.wangwenx190.FramelessHelper/ImageItem 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "source"
            type: "QVariant"
            read: "source"
            write: "setSource"
            notify: "sourceChanged"
            index: 0
            isFinal: true
        }
        Signal { name: "sourceChanged" }
    }
    Component {
        file: "quickmicamaterial.h"
        name: "wangwenx190::FramelessHelper::QuickMicaMaterial"
        accessSemantics: "reference"
        prototype: "QQuickPaintedItem"
        exports: ["org.wangwenx190.FramelessHelper/MicaMaterial 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "tintColor"
            type: "QColor"
            read: "tintColor"
            write: "setTintColor"
            notify: "tintColorChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "tintOpacity"
            type: "double"
            read: "tintOpacity"
            write: "setTintOpacity"
            notify: "tintOpacityChanged"
            index: 1
            isFinal: true
        }
        Property {
            name: "fallbackColor"
            type: "QColor"
            read: "fallbackColor"
            write: "setFallbackColor"
            notify: "fallbackColorChanged"
            index: 2
            isFinal: true
        }
        Property {
            name: "noiseOpacity"
            type: "double"
            read: "noiseOpacity"
            write: "setNoiseOpacity"
            notify: "noiseOpacityChanged"
            index: 3
            isFinal: true
        }
        Property {
            name: "fallbackEnabled"
            type: "bool"
            read: "isFallbackEnabled"
            write: "setFallbackEnabled"
            notify: "fallbackEnabledChanged"
            index: 4
            isFinal: true
        }
        Signal { name: "tintColorChanged" }
        Signal { name: "tintOpacityChanged" }
        Signal { name: "fallbackColorChanged" }
        Signal { name: "noiseOpacityChanged" }
        Signal { name: "fallbackEnabledChanged" }
    }
    Component {
        file: "quickstandardsystembutton_p.h"
        name: "wangwenx190::FramelessHelper::QuickStandardSystemButton"
        accessSemantics: "reference"
        prototype: "QQuickButton"
        exports: ["org.wangwenx190.FramelessHelper/StandardSystemButton 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "buttonType"
            type: "QuickGlobal::SystemButtonType"
            read: "buttonType"
            write: "setButtonType"
            notify: "buttonTypeChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "glyph"
            type: "QString"
            read: "glyph"
            write: "setGlyph"
            notify: "glyphChanged"
            index: 1
            isFinal: true
        }
        Property {
            name: "hoverColor"
            type: "QColor"
            read: "hoverColor"
            write: "setHoverColor"
            notify: "hoverColorChanged"
            index: 2
            isFinal: true
        }
        Property {
            name: "pressColor"
            type: "QColor"
            read: "pressColor"
            write: "setPressColor"
            notify: "pressColorChanged"
            index: 3
            isFinal: true
        }
        Property {
            name: "normalColor"
            type: "QColor"
            read: "normalColor"
            write: "setNormalColor"
            notify: "normalColorChanged"
            index: 4
            isFinal: true
        }
        Property {
            name: "activeForegroundColor"
            type: "QColor"
            read: "activeForegroundColor"
            write: "setActiveForegroundColor"
            notify: "activeForegroundColorChanged"
            index: 5
            isFinal: true
        }
        Property {
            name: "inactiveForegroundColor"
            type: "QColor"
            read: "inactiveForegroundColor"
            write: "setInactiveForegroundColor"
            notify: "inactiveForegroundColorChanged"
            index: 6
            isFinal: true
        }
        Property {
            name: "glyphSize"
            type: "double"
            read: "glyphSize"
            write: "setGlyphSize"
            notify: "glyphChanged"
            index: 7
            isFinal: true
        }
        Signal { name: "buttonTypeChanged" }
        Signal { name: "glyphChanged" }
        Signal { name: "normalColorChanged" }
        Signal { name: "hoverColorChanged" }
        Signal { name: "pressColorChanged" }
        Signal { name: "activeForegroundColorChanged" }
        Signal { name: "inactiveForegroundColorChanged" }
        Signal { name: "glyphSizeChanged" }
        Method { name: "updateColor" }
        Method {
            name: "setButtonType"
            Parameter { name: "type"; type: "QuickGlobal::SystemButtonType" }
        }
        Method {
            name: "setGlyph"
            Parameter { name: "value"; type: "QString" }
        }
        Method {
            name: "setNormalColor"
            Parameter { name: "value"; type: "QColor" }
        }
        Method {
            name: "setHoverColor"
            Parameter { name: "value"; type: "QColor" }
        }
        Method {
            name: "setPressColor"
            Parameter { name: "value"; type: "QColor" }
        }
        Method {
            name: "setActiveForegroundColor"
            Parameter { name: "value"; type: "QColor" }
        }
        Method {
            name: "setInactiveForegroundColor"
            Parameter { name: "value"; type: "QColor" }
        }
        Method {
            name: "setGlyphSize"
            Parameter { name: "value"; type: "double" }
        }
    }
    Component {
        file: "quickstandardtitlebar_p.h"
        name: "wangwenx190::FramelessHelper::QuickStandardTitleBar"
        accessSemantics: "reference"
        prototype: "QQuickRectangle"
        exports: ["org.wangwenx190.FramelessHelper/StandardTitleBar 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "titleLabelAlignment"
            type: "Qt::Alignment"
            read: "titleLabelAlignment"
            write: "setTitleLabelAlignment"
            notify: "titleLabelAlignmentChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "titleLabel"
            type: "QQuickLabel"
            isPointer: true
            read: "titleLabel"
            index: 1
            isReadonly: true
            isFinal: true
            isConstant: true
        }
        Property {
            name: "minimizeButton"
            type: "QuickStandardSystemButton"
            isPointer: true
            read: "minimizeButton"
            index: 2
            isReadonly: true
            isFinal: true
            isConstant: true
        }
        Property {
            name: "maximizeButton"
            type: "QuickStandardSystemButton"
            isPointer: true
            read: "maximizeButton"
            index: 3
            isReadonly: true
            isFinal: true
            isConstant: true
        }
        Property {
            name: "closeButton"
            type: "QuickStandardSystemButton"
            isPointer: true
            read: "closeButton"
            index: 4
            isReadonly: true
            isFinal: true
            isConstant: true
        }
        Property {
            name: "extended"
            type: "bool"
            read: "isExtended"
            write: "setExtended"
            notify: "extendedChanged"
            index: 5
            isFinal: true
        }
        Property {
            name: "hideWhenClose"
            type: "bool"
            read: "isHideWhenClose"
            write: "setHideWhenClose"
            notify: "hideWhenCloseChanged"
            index: 6
            isFinal: true
        }
        Property {
            name: "chromePalette"
            type: "QuickChromePalette"
            isPointer: true
            read: "chromePalette"
            index: 7
            isReadonly: true
            isFinal: true
            isConstant: true
        }
        Property {
            name: "windowIconSize"
            type: "QSizeF"
            read: "windowIconSize"
            write: "setWindowIconSize"
            notify: "windowIconSizeChanged"
            index: 8
            isFinal: true
        }
        Property {
            name: "windowIconVisible"
            type: "bool"
            read: "windowIconVisible"
            write: "setWindowIconVisible"
            notify: "windowIconVisibleChanged"
            index: 9
            isFinal: true
        }
        Property {
            name: "windowIcon"
            type: "QVariant"
            read: "windowIcon"
            write: "setWindowIcon"
            notify: "windowIconChanged"
            index: 10
            isFinal: true
        }
        Signal { name: "titleLabelAlignmentChanged" }
        Signal { name: "extendedChanged" }
        Signal { name: "hideWhenCloseChanged" }
        Signal { name: "windowIconSizeChanged" }
        Signal { name: "windowIconVisibleChanged" }
        Signal { name: "windowIconChanged" }
        Method { name: "updateMaximizeButton" }
        Method { name: "updateTitleLabelText" }
        Method { name: "updateTitleBarColor" }
        Method { name: "updateChromeButtonColor" }
        Method { name: "clickMinimizeButton" }
        Method { name: "clickMaximizeButton" }
        Method { name: "clickCloseButton" }
        Method { name: "retranslateUi" }
        Method { name: "updateWindowIcon" }
    }
    Component {
        file: "quickwindowborder.h"
        name: "wangwenx190::FramelessHelper::QuickWindowBorder"
        accessSemantics: "reference"
        prototype: "QQuickPaintedItem"
        exports: ["org.wangwenx190.FramelessHelper/WindowBorder 1.0"]
        exportMetaObjectRevisions: [256]
        Property {
            name: "thickness"
            type: "double"
            read: "thickness"
            write: "setThickness"
            notify: "thicknessChanged"
            index: 0
            isFinal: true
        }
        Property {
            name: "edges"
            type: "QuickGlobal::WindowEdges"
            read: "edges"
            write: "setEdges"
            notify: "edgesChanged"
            index: 1
            isFinal: true
        }
        Property {
            name: "activeColor"
            type: "QColor"
            read: "activeColor"
            write: "setActiveColor"
            notify: "activeColorChanged"
            index: 2
            isFinal: true
        }
        Property {
            name: "inactiveColor"
            type: "QColor"
            read: "inactiveColor"
            write: "setInactiveColor"
            notify: "inactiveColorChanged"
            index: 3
            isFinal: true
        }
        Property {
            name: "nativeThickness"
            type: "double"
            read: "nativeThickness"
            notify: "nativeBorderChanged"
            index: 4
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "nativeEdges"
            type: "QuickGlobal::WindowEdges"
            read: "nativeEdges"
            notify: "nativeBorderChanged"
            index: 5
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "nativeActiveColor"
            type: "QColor"
            read: "nativeActiveColor"
            notify: "nativeBorderChanged"
            index: 6
            isReadonly: true
            isFinal: true
        }
        Property {
            name: "nativeInactiveColor"
            type: "QColor"
            read: "nativeInactiveColor"
            notify: "nativeBorderChanged"
            index: 7
            isReadonly: true
            isFinal: true
        }
        Signal { name: "thicknessChanged" }
        Signal { name: "edgesChanged" }
        Signal { name: "activeColorChanged" }
        Signal { name: "inactiveColorChanged" }
        Signal { name: "nativeBorderChanged" }
        Method {
            name: "setThickness"
            Parameter { name: "value"; type: "double" }
        }
        Method {
            name: "setEdges"
            Parameter { name: "value"; type: "QuickGlobal::WindowEdges" }
        }
        Method {
            name: "setActiveColor"
            Parameter { name: "value"; type: "QColor" }
        }
        Method {
            name: "setInactiveColor"
            Parameter { name: "value"; type: "QColor" }
        }
    }
}
